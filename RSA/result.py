from sympy import mod_inverse
N = 3646154850295011369707131011438711095400799139943170490872585628683549034362552065955809589514611470241298944167703929337528884908857116141935206466329731087514964112054543019336536216107629523597606330154669196064144182472739556974502462402438903115845725630946428943768540714098264727068026730424033578827886916761701429264950573899186177
e = 65537
c = 999372426443161825768261122507387520319146419157428202406305483360321069377515258938143027195560609347329712013094940407173343060130336521964455884700126704502642863138549811044126596465245801133531898801224967382888345023828019957642397374145870962810657798659650553538262093755462868597651681381398228479410962910492069485637348068405457

# Fatores de N (já conhecidos)
p = 6864797660130609714981900799081393217269435300143305409394463459185543183397656052122559640661454554977296311391480858037121987999716643812574028291115057151
q = 531137992816767098689588206552468627329593117727031923199444138200403559860852242739162502265229285668889329486246501015346579337652707239409519978766587351943831270835393219031728127

# Calculando phi(N)
phi_N = (p - 1) * (q - 1)

# Calculando d (inverso de e mod phi(N))
d = mod_inverse(e, phi_N)

# Descriptografando a mensagem
m = pow(c, d, N)

# Convertendo o número para bytes e decodificando como string
def long_to_bytes(val, endianness='big'):
    # Conversão do número em bytes
    width = (val.bit_length() + 7) // 8
    return val.to_bytes(width, byteorder=endianness)

# Exemplo de número descriptografado
m = 104930030522102633392370225666154617316017675251240871888109437

# Convertendo o número para bytes
message = long_to_bytes(m)

# Decodificando a mensagem para texto
print(message.decode('utf-8'))

